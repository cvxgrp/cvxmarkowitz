:py:mod:`markowitz.builder`
===========================

.. py:module:: markowitz.builder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   markowitz.builder._Problem
   markowitz.builder.Builder




.. py:class:: _Problem

   .. py:attribute:: problem
      :annotation: :cvxpy.Problem

      

   .. py:attribute:: model
      :annotation: :Dict[str, cvx.markowitz.Model]

      

   .. py:attribute:: constraints
      :annotation: :Dict[str, cvxpy.Constraint]

      

   .. py:attribute:: variables
      :annotation: :Dict[str, cvxpy.Variable]

      

   .. py:attribute:: parameter
      :annotation: :Dict[str, cvxpy.Parameter]

      

   .. py:method:: update(self, **kwargs)

      Update the model


   .. py:method:: solve(self, **kwargs)

      Solve the problem


   .. py:method:: solution(self, variable='weights')

      Return the solution


   .. py:method:: value(self)
      :property:


   .. py:method:: is_dpp(self)



.. py:class:: Builder

   .. py:attribute:: assets
      :annotation: :int = 0

      

   .. py:attribute:: factors
      :annotation: :int

      

   .. py:attribute:: model
      :annotation: :Dict[str, cvx.markowitz.Model]

      

   .. py:attribute:: constraints
      :annotation: :Dict[str, cvxpy.Constraint]

      

   .. py:attribute:: variables
      :annotation: :Dict[str, cvxpy.Variable]

      

   .. py:attribute:: parameter
      :annotation: :Dict[str, cvxpy.Parameter]

      

   .. py:method:: __post_init__(self)


   .. py:method:: objective(self)
      :property:

      Return the objective function


   .. py:method:: build(self)

      Build the cvxpy problem


   .. py:method:: data(self)
      :property:



