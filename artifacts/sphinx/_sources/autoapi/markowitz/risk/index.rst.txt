:py:mod:`markowitz.risk`
========================

.. py:module:: markowitz.risk


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   cvar/index.rst
   factor/index.rst
   sample/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   markowitz.risk.CVar
   markowitz.risk.FactorModel
   markowitz.risk.SampleCovariance




.. py:class:: CVar

   Bases: :py:obj:`cvx.markowitz.Model`

   Conditional value at risk model

   .. py:attribute:: alpha
      :annotation: :float = 0.95

      

   .. py:attribute:: rows
      :annotation: :int = 0

      

   .. py:method:: __post_init__(self)


   .. py:method:: estimate(self, variables: Dict[str, cvxpy.Variable]) -> cvxpy.Expression

      Estimate the risk by computing the Cholesky decomposition of self.cov


   .. py:method:: update(self, **kwargs)

      Update the data in the risk model



.. py:class:: FactorModel

   Bases: :py:obj:`cvx.markowitz.Model`

   Factor risk model

   .. py:attribute:: factors
      :annotation: :int = 0

      

   .. py:method:: __post_init__(self)


   .. py:method:: estimate(self, variables) -> cvxpy.Expression

      Compute the total variance


   .. py:method:: _residual_risk(self, variables)


   .. py:method:: _systematic_risk(self, variables)


   .. py:method:: update(self, **kwargs)

      Update the data in the risk model


   .. py:method:: constraints(self, variables)

      Return the constraints for the risk model



.. py:class:: SampleCovariance

   Bases: :py:obj:`cvx.markowitz.Model`

   Risk model based on the Cholesky decomposition of the sample cov matrix

   .. py:method:: __post_init__(self)


   .. py:method:: estimate(self, variables: Dict[str, cvxpy.Variable]) -> cvxpy.Expression

      Estimate the risk by computing the Cholesky decomposition of
      self.cov


   .. py:method:: update(self, **kwargs)

      Update the data in the risk model


   .. py:method:: constraints(self, variables)

      Return the constraints for the risk model



