:py:mod:`simulator.portfolio`
=============================

.. py:module:: simulator.portfolio


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   simulator.portfolio.EquityPortfolio



Functions
~~~~~~~~~

.. autoapisummary::

   simulator.portfolio.diff



.. py:function:: diff(portfolio1, portfolio2, initial_cash=1000000.0, trading_cost_model=None)


.. py:class:: EquityPortfolio

   A class that represents an equity portfolio
   and contains dataframes for prices and stock holdings,
   as well as optional parameters for trading cost models
   and initial cash values.

   .. attribute:: prices

      A pandas dataframe representing

      :type: pd.DataFrame

   .. attribute:: the prices of various assets held by the portfolio over time.

      

   .. attribute:: stocks

      A pandas dataframe representing the number of shares

      :type: pd.DataFrame

   .. attribute:: held for each asset in the portfolio over time.

      

   .. attribute:: trading_cost_model

      An optional trading cost model

      :type: TradingCostModel

   .. attribute:: to use when trading assets in the portfolio.

      

   .. attribute:: initial_cash

      An optional scalar float representing the initial

      :type: float

   .. attribute:: cash value available for the portfolio.

      

   Notes: The EquityPortfolio class is designed to represent
   a portfolio of assets where only equity positions are held.
   The prices and stocks dataframes are assumed to have the same
   index object representing the available time periods for which data is available.
   If no trading cost model is provided, the trading_cost_model attribute
   will be set to None by default.
   If no initial cash value is provided, the initial_cash attribute
   will be set to a default value of 1,000,000.

   .. py:attribute:: prices
      :annotation: :pandas.DataFrame

      

   .. py:attribute:: stocks
      :annotation: :pandas.DataFrame

      

   .. py:attribute:: trading_cost_model
      :annotation: :cvx.simulator.trading_costs.TradingCostModel

      

   .. py:attribute:: initial_cash
      :annotation: :float = 1000000.0

      

   .. py:method:: __post_init__(self)

      A class method that performs input validation after object initialization.
      Notes: The post_init method is called after an instance of the EquityPortfolio class has been initialized,
      and performs a series of input validation checks to ensure that the prices
      and stocks dataframes are in the expected format
      with no duplicates or missing data,
      and that the stocks dataframe represents valid equity positions
      for the assets held in the portfolio.
      Specifically, the method checks that both the prices and stocks dataframes
      have a monotonic increasing and unique index,
      and that the index and columns of the stocks dataframe are subsets
      of the index and columns of the prices dataframe, respectively.
      If any of these checks fail, an assertion error will be raised.


   .. py:method:: index(self)
      :property:

      A property that returns the index of the EquityPortfolio instance,
      which is the time period for which the portfolio data is available.

      Returns: pd.Index: A pandas index representing the time period for which the
      portfolio data is available.

      Notes: The function extracts the index of the prices dataframe,
      which represents the time periods for which data is available for the portfolio.
      The resulting index will be a pandas index object with the same length
      as the number of rows in the prices dataframe.


   .. py:method:: assets(self)
      :property:

      A property that returns a list of the assets held by the EquityPortfolio object.

      Returns: list: A list of the assets held by the EquityPortfolio object.

      Notes: The function extracts the column names of the prices dataframe,
      which correspond to the assets held by the EquityPortfolio object.
      The resulting list will contain the names of all assets held by the portfolio, without any duplicates.


   .. py:method:: weights(self)
      :property:

      A property that returns a pandas dataframe representing
      the weights of various assets in the portfolio.

      Returns: pd.DataFrame: A pandas dataframe representing the weights
      of various assets in the portfolio.

      Notes: The function calculates the weights of various assets
      in the portfolio by dividing the equity positions
      for each asset (as represented in the equity dataframe)
      by the total portfolio value (as represented in the nav dataframe).
      Both dataframes are assumed to have the same dimensions.
      The resulting dataframe will show the relative weight
      of each asset in the portfolio at each point in time.


   .. py:method:: __getitem__(self, time)

      The `__getitem__` method retrieves the stock data for a specific time in the dataframe.
      It returns the stock data for that time.

      The method takes one input parameter:
      - `time`: the time index for which to retrieve the stock data

      Returns:
      - stock data for the input time

      Note that the input time must be in the index of the dataframe,
      otherwise a KeyError will be raised.


   .. py:method:: trading_costs(self)
      :property:

      A property that returns a pandas dataframe
      representing the trading costs incurred by the portfolio due to trades made.

      Returns: pd.DataFrame: A pandas dataframe representing the trading
      costs incurred by the portfolio due to trades made.

      Notes: The function calculates the trading costs using the specified
      trading cost model (if available) and the prices and trading
      data represented by the prices and trades_stocks
      dataframes, respectively. If no trading cost model is provided,
      a dataframe with all zeros will be returned.
      The resulting dataframe will have the same dimensions as
      the prices and trades_stocks dataframes,
      showing the trading costs incurred at each point in time for each asset traded.


   .. py:method:: equity(self) -> pandas.DataFrame
      :property:

      A property that returns a pandas dataframe
      representing the equity positions of the portfolio,
      which is the value of each asset held by the portfolio.
      Returns: pd.DataFrame: A pandas dataframe representing
      the equity positions of the portfolio.

      Notes: The function calculates the equity of the portfolio
      by multiplying the current prices of each asset
      by the number of shares held by the portfolio.
      The resulting values are filled forward to account
      for any missing data or NaN values.
      The equity dataframe will have the same dimensions
      as the prices and stocks dataframes.


   .. py:method:: trades_stocks(self) -> pandas.DataFrame
      :property:

      A property that returns a pandas dataframe representing the trades made in the portfolio in terms of stocks.

      Returns: pd.DataFrame: A pandas dataframe representing the trades made in the portfolio in terms of stocks.

      Notes: The function calculates the trades made by the portfolio by taking
      the difference between the current and previous values of the stocks dataframe.
      The resulting values will represent the number of shares of each asset
      bought or sold by the portfolio at each point in time.
      The resulting dataframe will have the same dimensions
      as the stocks dataframe, with NaN values filled with zeros.


   .. py:method:: trades_currency(self) -> pandas.DataFrame
      :property:

      A property that returns a pandas dataframe representing the trades made in the portfolio in terms of currency.

      Returns: pd.DataFrame: A pandas dataframe representing the trades made in the portfolio in terms of currency.

      Notes: The function calculates the trades made in currency by multiplying
      the number of shares of each asset bought or sold (as represented in the trades_stocks dataframe)
      with the current prices of each asset (as represented in the prices dataframe).
      Uses pandas ffill() method to forward fill NaN values in the prices dataframe.
      The resulting dataframe will have the same dimensions as the stocks and prices dataframes.


   .. py:method:: turnover(self) -> pandas.DataFrame
      :property:


   .. py:method:: cash(self) -> pandas.Series
      :property:

      A property that returns a pandas series representing the cash on hand in the portfolio.

      Returns: pd.Series: A pandas series representing the cash on hand in the portfolio.

      Notes: The function calculates the cash available in the portfolio by subtracting
      the sum of trades currency and cumulative trading costs from the initial cash value specified
      when constructing the object. Uses pandas cumsum() method
      to calculate the cumulative sum of trading costs and
      trades currency along the time axis.
      The resulting series will show how much money is available for further trades at each point in time.


   .. py:method:: nav(self) -> pandas.Series
      :property:

      Returns a pandas series representing the total value
      of the portfolio's investments and cash.

      Returns: pd.Series: A pandas series representing the
                          total value of the portfolio's investments and cash.


   .. py:method:: profit(self) -> pandas.Series
      :property:

      A property that returns a pandas series representing the
      profit gained or lost in the portfolio based on changes in asset prices.

      Returns: pd.Series: A pandas series representing the profit
      gained or lost in the portfolio based on changes in asset prices.

      Notes: The calculation is based on the difference between
      the previous and current prices of the assets in the portfolio,
      multiplied by the number of stocks in each asset previously held.


   .. py:method:: highwater(self) -> pandas.Series
      :property:

      A function that returns a pandas series representing
      the high-water mark of the portfolio, which is the highest point
      the portfolio value has reached over time.

      Returns: pd.Series: A pandas series representing the
      high-water mark of the portfolio.

      Notes: The function performs a rolling computation based on
      the cumulative maximum of the portfolio's value over time,
      starting from the beginning of the time period being considered.
      Min_periods argument is set to 1 to include the minimum period of one day.
      The resulting series will show the highest value the portfolio has reached at each point in time.


   .. py:method:: drawdown(self) -> pandas.Series
      :property:

      A property that returns a pandas series representing the
      drawdown of the portfolio, which measures the decline
      in the portfolio's value from its (previously) highest
      point to its current point.

      Returns: pd.Series: A pandas series representing the
      drawdown of the portfolio.

      Notes: The function calculates the ratio of the portfolio's current value
      vs. its current high-water-mark and then subtracting the result from 1.
      A positive drawdown means the portfolio is currently worth
      less than its high-water mark. A drawdown of 0.1 implies that the nav is currently 0.9 times the high-water mark


   .. py:method:: __mul__(self, scalar)

      A method that allows multiplication of the EquityPortfolio object with a scalar constant.

      Args: scalar: A scalar constant that multiplies the number of shares
      of each asset held in the EquityPortfolio object.

      Returns: EquityPortfolio: A new EquityPortfolio object multiplied by the scalar constant.

      Notes: The mul method allows multiplication of an EquityPortfolio object
      with a scalar constant to increase or decrease
      the number of shares held for each asset in the portfolio accordingly.
      The method returns a new EquityPortfolio object with the same prices
      and trading cost model as the original object,
      and with the number of shares for each asset multiplied by the scalar constant
      (as represented in the stocks dataframe).
      Additionally, the initial cash value is multiplied
      by the scalar to maintain the same cash-to-equity ratio as the original portfolio.


   .. py:method:: __rmul__(self, scalar)

      A method that allows multiplication of the EquityPortfolio object with a scalar constant in a reversed order.

      Args: scalar: A scalar constant that multiplies the EquityPortfolio object in a reversed order.

      Returns: EquityPortfolio: A new EquityPortfolio object multiplied by the scalar constant.

      Notes: The rmul method allows multiplication of a scalar
      constant with an EquityPortfolio object in a reversed order


   .. py:method:: __add__(self, port_new)

      A method that allows addition of two EquityPortfolio objects.


   .. py:method:: reset_prices(self, prices)

      A method that constructs an EquityPortfolio object using finer prices.


   .. py:method:: truncate(self, before=None, after=None)

      The truncate method truncates the prices DataFrame, stocks DataFrame
      and the cash series of an EquityPortfolio object.
      The method also optionally accepts a before and/or after argument
      to specify a date range for truncation.

      The method returns a new EquityPortfolio object which is a truncated version
      of the original object, with the same trading cost model
      and initial cash value. The stocks DataFrame is truncated
      using the same before and after arguments and the prices DataFrame
      is truncated similarly. The cash value is truncated
      to match the new date range and the first value of the
      truncated cash series is used as the initial cash value for the new object.

      Note that this method does not modify the original EquityPortfolio object,
      but rather returns a new object.
      :param before:
      :param after:
      :return:


   .. py:method:: resample(self, rule)

      The resample method resamples an EquityPortfolio object to a new frequency
      specified by the rule argument.
      A new EquityPortfolio object is created with the original prices
      DataFrame and the resampled stocks DataFrame. The objects trading cost model and initial cash value
      are also copied into the new object.

      Note that the resample method does not modify the original EquityPortfolio object,
      but rather returns a new object.



